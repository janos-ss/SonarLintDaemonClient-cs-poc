// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonarlint-daemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sonarlint {

  /// <summary>Holder for reflection information generated from sonarlint-daemon.proto</summary>
  public static partial class SonarlintDaemonReflection {

    #region Descriptor
    /// <summary>File descriptor for sonarlint-daemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SonarlintDaemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZzb25hcmxpbnQtZGFlbW9uLnByb3RvEglzb25hcmxpbnQiVQoPTW9kdWxl",
            "VXBkYXRlUmVxEi4KDXNlcnZlcl9jb25maWcYASABKAsyFy5zb25hcmxpbnQu",
            "U2VydmVyQ29uZmlnEhIKCm1vZHVsZV9rZXkYAiABKAkiFgoHUnVsZUtleRIL",
            "CgNrZXkYASABKAkikAEKDFN0b3JhZ2VTdGF0ZRIsCgVzdGF0ZRgBIAEoDjId",
            "LnNvbmFybGludC5TdG9yYWdlU3RhdGUuU3RhdGUiUgoFU3RhdGUSCgoGVU5L",
            "Tk9XEAASDAoIVVBEQVRJTkcQARIRCg1ORVZFUl9VUERBVEVEEAISDwoLTkVF",
            "RF9VUERBVEUQAxILCgdVUERBVEVEEAQiBgoEVm9pZCJ2CghMb2dFdmVudBIN",
            "CgVsZXZlbBgBIAEoCRILCgNsb2cYAiABKAkSEAoIaXNfZGVidWcYAyABKAgi",
            "PAoFTGV2ZWwSCQoFRVJST1IQABIICgRXQVJOEAESCAoESU5GTxACEgkKBURF",
            "QlVHEAMSCQoFVFJBQ0UQBCK5AQoMU2VydmVyQ29uZmlnEhAKCGhvc3RfdXJs",
            "GAEgASgJEhIKCnVzZXJfYWdlbnQYAiABKAkSDwoFdG9rZW4YAyABKAlIABI6",
            "CgtjcmVkZW50aWFscxgEIAEoCzIjLnNvbmFybGludC5TZXJ2ZXJDb25maWcu",
            "Q3JlZGVudGlhbHNIABouCgtDcmVkZW50aWFscxINCgVsb2dpbhgBIAEoCRIQ",
            "CghwYXNzd29yZBgCIAEoCUIGCgRhdXRoIrMCCgVJc3N1ZRIrCghzZXZlcml0",
            "eRgBIAEoDjIZLnNvbmFybGludC5Jc3N1ZS5TZXZlcml0eRISCgpzdGFydF9s",
            "aW5lGAIgASgFEhkKEXN0YXJ0X2xpbmVfb2Zmc2V0GAMgASgFEhAKCGVuZF9s",
            "aW5lGAQgASgFEhcKD2VuZF9saW5lX29mZnNldBgFIAEoBRIPCgdtZXNzYWdl",
            "GAYgASgJEhAKCHJ1bGVfa2V5GAcgASgJEhEKCXJ1bGVfbmFtZRgIIAEoCRIR",
            "CglmaWxlX3BhdGgYCSABKAkSEwoLdXNlcl9vYmplY3QYCiABKAkiRQoIU2V2",
            "ZXJpdHkSCwoHQkxPQ0tFUhAAEgwKCENSSVRJQ0FMEAESCQoFTUFKT1IQAhIJ",
            "CgVNSU5PUhADEggKBElORk8QBCJ0CgtSdWxlRGV0YWlscxILCgNrZXkYASAB",
            "KAkSDAoEbmFtZRgCIAEoCRIYChBodG1sX2Rlc2NyaXB0aW9uGAMgASgJEhAK",
            "CGxhbmd1YWdlGAQgASgJEhAKCHNldmVyaXR5GAUgASgJEgwKBHRhZ3MYBiAD",
            "KAkixAEKC0FuYWx5c2lzUmVxEjoKCnByb3BlcnRpZXMYASADKAsyJi5zb25h",
            "cmxpbnQuQW5hbHlzaXNSZXEuUHJvcGVydGllc0VudHJ5EiIKBGZpbGUYAiAD",
            "KAsyFC5zb25hcmxpbnQuSW5wdXRGaWxlEhAKCGJhc2VfZGlyGAMgASgJEhAK",
            "CHdvcmtfZGlyGAQgASgJGjEKD1Byb3BlcnRpZXNFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBIlAKCUlucHV0RmlsZRIMCgRwYXRoGAEg",
            "ASgJEg8KB2NoYXJzZXQYAiABKAkSDwoHaXNfdGVzdBgDIAEoCBITCgt1c2Vy",
            "X29iamVjdBgEIAEoCSLqAQoUQ29ubmVjdGVkQW5hbHlzaXNSZXESQwoKcHJv",
            "cGVydGllcxgBIAMoCzIvLnNvbmFybGludC5Db25uZWN0ZWRBbmFseXNpc1Jl",
            "cS5Qcm9wZXJ0aWVzRW50cnkSIgoEZmlsZRgCIAMoCzIULnNvbmFybGludC5J",
            "bnB1dEZpbGUSEAoIYmFzZV9kaXIYAyABKAkSEAoId29ya19kaXIYBCABKAkS",
            "EgoKbW9kdWxlX2tleRgFIAEoCRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJAChdTdGFuZGFsb25lQ29uZmln",
            "dXJhdGlvbhIRCglob21lX3BhdGgYASABKAkSEgoKcGx1Z2luX3VybBgCIAMo",
            "CSI/ChZDb25uZWN0ZWRDb25maWd1cmF0aW9uEhIKCnN0b3JhZ2VfaWQYASAB",
            "KAkSEQoJaG9tZV9wYXRoGAIgASgJMqwDChJDb25uZWN0ZWRTb25hckxpbnQS",
            "OwoFU3RhcnQSIS5zb25hcmxpbnQuQ29ubmVjdGVkQ29uZmlndXJhdGlvbhoP",
            "LnNvbmFybGludC5Wb2lkEj4KB0FuYWx5emUSHy5zb25hcmxpbnQuQ29ubmVj",
            "dGVkQW5hbHlzaXNSZXEaEC5zb25hcmxpbnQuSXNzdWUwARIyCgZVcGRhdGUS",
            "Fy5zb25hcmxpbnQuU2VydmVyQ29uZmlnGg8uc29uYXJsaW50LlZvaWQSOwoM",
            "VXBkYXRlTW9kdWxlEhouc29uYXJsaW50Lk1vZHVsZVVwZGF0ZVJlcRoPLnNv",
            "bmFybGludC5Wb2lkEjQKCEdldFN0YXRlEg8uc29uYXJsaW50LlZvaWQaFy5z",
            "b25hcmxpbnQuU3RvcmFnZVN0YXRlEjQKClN0cmVhbUxvZ3MSDy5zb25hcmxp",
            "bnQuVm9pZBoTLnNvbmFybGludC5Mb2dFdmVudDABEjwKDkdldFJ1bGVEZXRh",
            "aWxzEhIuc29uYXJsaW50LlJ1bGVLZXkaFi5zb25hcmxpbnQuUnVsZURldGFp",
            "bHMy/gEKE1N0YW5kYWxvbmVTb25hckxpbnQSPAoFU3RhcnQSIi5zb25hcmxp",
            "bnQuU3RhbmRhbG9uZUNvbmZpZ3VyYXRpb24aDy5zb25hcmxpbnQuVm9pZBI1",
            "CgdBbmFseXplEhYuc29uYXJsaW50LkFuYWx5c2lzUmVxGhAuc29uYXJsaW50",
            "Lklzc3VlMAESNAoKU3RyZWFtTG9ncxIPLnNvbmFybGludC5Wb2lkGhMuc29u",
            "YXJsaW50LkxvZ0V2ZW50MAESPAoOR2V0UnVsZURldGFpbHMSEi5zb25hcmxp",
            "bnQuUnVsZUtleRoWLnNvbmFybGludC5SdWxlRGV0YWlsc0IqCiZvcmcuc29u",
            "YXJzb3VyY2Uuc29uYXJsaW50LmRhZW1vbi5wcm90b0gBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.ModuleUpdateReq), global::Sonarlint.ModuleUpdateReq.Parser, new[]{ "ServerConfig", "ModuleKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.RuleKey), global::Sonarlint.RuleKey.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.StorageState), global::Sonarlint.StorageState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Sonarlint.StorageState.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.Void), global::Sonarlint.Void.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.LogEvent), global::Sonarlint.LogEvent.Parser, new[]{ "Level", "Log", "IsDebug" }, null, new[]{ typeof(global::Sonarlint.LogEvent.Types.Level) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.ServerConfig), global::Sonarlint.ServerConfig.Parser, new[]{ "HostUrl", "UserAgent", "Token", "Credentials" }, new[]{ "Auth" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.ServerConfig.Types.Credentials), global::Sonarlint.ServerConfig.Types.Credentials.Parser, new[]{ "Login", "Password" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.Issue), global::Sonarlint.Issue.Parser, new[]{ "Severity", "StartLine", "StartLineOffset", "EndLine", "EndLineOffset", "Message", "RuleKey", "RuleName", "FilePath", "UserObject" }, null, new[]{ typeof(global::Sonarlint.Issue.Types.Severity) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.RuleDetails), global::Sonarlint.RuleDetails.Parser, new[]{ "Key", "Name", "HtmlDescription", "Language", "Severity", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.AnalysisReq), global::Sonarlint.AnalysisReq.Parser, new[]{ "Properties", "File", "BaseDir", "WorkDir" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.InputFile), global::Sonarlint.InputFile.Parser, new[]{ "Path", "Charset", "IsTest", "UserObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.ConnectedAnalysisReq), global::Sonarlint.ConnectedAnalysisReq.Parser, new[]{ "Properties", "File", "BaseDir", "WorkDir", "ModuleKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.StandaloneConfiguration), global::Sonarlint.StandaloneConfiguration.Parser, new[]{ "HomePath", "PluginUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sonarlint.ConnectedConfiguration), global::Sonarlint.ConnectedConfiguration.Parser, new[]{ "StorageId", "HomePath" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ModuleUpdateReq : pb::IMessage<ModuleUpdateReq> {
    private static readonly pb::MessageParser<ModuleUpdateReq> _parser = new pb::MessageParser<ModuleUpdateReq>(() => new ModuleUpdateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleUpdateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleUpdateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleUpdateReq(ModuleUpdateReq other) : this() {
      ServerConfig = other.serverConfig_ != null ? other.ServerConfig.Clone() : null;
      moduleKey_ = other.moduleKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleUpdateReq Clone() {
      return new ModuleUpdateReq(this);
    }

    /// <summary>Field number for the "server_config" field.</summary>
    public const int ServerConfigFieldNumber = 1;
    private global::Sonarlint.ServerConfig serverConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sonarlint.ServerConfig ServerConfig {
      get { return serverConfig_; }
      set {
        serverConfig_ = value;
      }
    }

    /// <summary>Field number for the "module_key" field.</summary>
    public const int ModuleKeyFieldNumber = 2;
    private string moduleKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleKey {
      get { return moduleKey_; }
      set {
        moduleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleUpdateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleUpdateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerConfig, other.ServerConfig)) return false;
      if (ModuleKey != other.ModuleKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverConfig_ != null) hash ^= ServerConfig.GetHashCode();
      if (ModuleKey.Length != 0) hash ^= ModuleKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerConfig);
      }
      if (ModuleKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModuleKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerConfig);
      }
      if (ModuleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleUpdateReq other) {
      if (other == null) {
        return;
      }
      if (other.serverConfig_ != null) {
        if (serverConfig_ == null) {
          serverConfig_ = new global::Sonarlint.ServerConfig();
        }
        ServerConfig.MergeFrom(other.ServerConfig);
      }
      if (other.ModuleKey.Length != 0) {
        ModuleKey = other.ModuleKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serverConfig_ == null) {
              serverConfig_ = new global::Sonarlint.ServerConfig();
            }
            input.ReadMessage(serverConfig_);
            break;
          }
          case 18: {
            ModuleKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuleKey : pb::IMessage<RuleKey> {
    private static readonly pb::MessageParser<RuleKey> _parser = new pb::MessageParser<RuleKey>(() => new RuleKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleKey(RuleKey other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleKey Clone() {
      return new RuleKey(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleKey other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StorageState : pb::IMessage<StorageState> {
    private static readonly pb::MessageParser<StorageState> _parser = new pb::MessageParser<StorageState>(() => new StorageState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageState(StorageState other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageState Clone() {
      return new StorageState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Sonarlint.StorageState.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sonarlint.StorageState.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Sonarlint.StorageState.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StorageState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("UNKNOW")] Unknow = 0,
        [pbr::OriginalName("UPDATING")] Updating = 1,
        [pbr::OriginalName("NEVER_UPDATED")] NeverUpdated = 2,
        [pbr::OriginalName("NEED_UPDATE")] NeedUpdate = 3,
        [pbr::OriginalName("UPDATED")] Updated = 4,
      }

    }
    #endregion

  }

  public sealed partial class Void : pb::IMessage<Void> {
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone() {
      return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LogEvent : pb::IMessage<LogEvent> {
    private static readonly pb::MessageParser<LogEvent> _parser = new pb::MessageParser<LogEvent>(() => new LogEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent(LogEvent other) : this() {
      level_ = other.level_;
      log_ = other.log_;
      isDebug_ = other.isDebug_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent Clone() {
      return new LogEvent(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private string level_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 2;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_debug" field.</summary>
    public const int IsDebugFieldNumber = 3;
    private bool isDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDebug {
      get { return isDebug_; }
      set {
        isDebug_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Log != other.Log) return false;
      if (IsDebug != other.IsDebug) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      if (IsDebug != false) hash ^= IsDebug.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Level);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Log);
      }
      if (IsDebug != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDebug);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      if (IsDebug != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEvent other) {
      if (other == null) {
        return;
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
      if (other.IsDebug != false) {
        IsDebug = other.IsDebug;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Level = input.ReadString();
            break;
          }
          case 18: {
            Log = input.ReadString();
            break;
          }
          case 24: {
            IsDebug = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Level {
        [pbr::OriginalName("ERROR")] Error = 0,
        [pbr::OriginalName("WARN")] Warn = 1,
        [pbr::OriginalName("INFO")] Info = 2,
        [pbr::OriginalName("DEBUG")] Debug = 3,
        [pbr::OriginalName("TRACE")] Trace = 4,
      }

    }
    #endregion

  }

  public sealed partial class ServerConfig : pb::IMessage<ServerConfig> {
    private static readonly pb::MessageParser<ServerConfig> _parser = new pb::MessageParser<ServerConfig>(() => new ServerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig(ServerConfig other) : this() {
      hostUrl_ = other.hostUrl_;
      userAgent_ = other.userAgent_;
      switch (other.AuthCase) {
        case AuthOneofCase.Token:
          Token = other.Token;
          break;
        case AuthOneofCase.Credentials:
          Credentials = other.Credentials.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerConfig Clone() {
      return new ServerConfig(this);
    }

    /// <summary>Field number for the "host_url" field.</summary>
    public const int HostUrlFieldNumber = 1;
    private string hostUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostUrl {
      get { return hostUrl_; }
      set {
        hostUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 2;
    private string userAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return authCase_ == AuthOneofCase.Token ? (string) auth_ : ""; }
      set {
        auth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        authCase_ = AuthOneofCase.Token;
      }
    }

    /// <summary>Field number for the "credentials" field.</summary>
    public const int CredentialsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sonarlint.ServerConfig.Types.Credentials Credentials {
      get { return authCase_ == AuthOneofCase.Credentials ? (global::Sonarlint.ServerConfig.Types.Credentials) auth_ : null; }
      set {
        auth_ = value;
        authCase_ = value == null ? AuthOneofCase.None : AuthOneofCase.Credentials;
      }
    }

    private object auth_;
    /// <summary>Enum of possible cases for the "auth" oneof.</summary>
    public enum AuthOneofCase {
      None = 0,
      Token = 3,
      Credentials = 4,
    }
    private AuthOneofCase authCase_ = AuthOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthOneofCase AuthCase {
      get { return authCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuth() {
      authCase_ = AuthOneofCase.None;
      auth_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostUrl != other.HostUrl) return false;
      if (UserAgent != other.UserAgent) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(Credentials, other.Credentials)) return false;
      if (AuthCase != other.AuthCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostUrl.Length != 0) hash ^= HostUrl.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (authCase_ == AuthOneofCase.Token) hash ^= Token.GetHashCode();
      if (authCase_ == AuthOneofCase.Credentials) hash ^= Credentials.GetHashCode();
      hash ^= (int) authCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostUrl);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserAgent);
      }
      if (authCase_ == AuthOneofCase.Token) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (authCase_ == AuthOneofCase.Credentials) {
        output.WriteRawTag(34);
        output.WriteMessage(Credentials);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostUrl);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (authCase_ == AuthOneofCase.Token) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (authCase_ == AuthOneofCase.Credentials) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Credentials);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.HostUrl.Length != 0) {
        HostUrl = other.HostUrl;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      switch (other.AuthCase) {
        case AuthOneofCase.Token:
          Token = other.Token;
          break;
        case AuthOneofCase.Credentials:
          Credentials = other.Credentials;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostUrl = input.ReadString();
            break;
          }
          case 18: {
            UserAgent = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            global::Sonarlint.ServerConfig.Types.Credentials subBuilder = new global::Sonarlint.ServerConfig.Types.Credentials();
            if (authCase_ == AuthOneofCase.Credentials) {
              subBuilder.MergeFrom(Credentials);
            }
            input.ReadMessage(subBuilder);
            Credentials = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Credentials : pb::IMessage<Credentials> {
        private static readonly pb::MessageParser<Credentials> _parser = new pb::MessageParser<Credentials>(() => new Credentials());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Credentials> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sonarlint.ServerConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Credentials() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Credentials(Credentials other) : this() {
          login_ = other.login_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Credentials Clone() {
          return new Credentials(this);
        }

        /// <summary>Field number for the "login" field.</summary>
        public const int LoginFieldNumber = 1;
        private string login_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Login {
          get { return login_; }
          set {
            login_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Credentials);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Credentials other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Login != other.Login) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Login.Length != 0) hash ^= Login.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Login.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Login);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Login.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Login);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Credentials other) {
          if (other == null) {
            return;
          }
          if (other.Login.Length != 0) {
            Login = other.Login;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Login = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Issue : pb::IMessage<Issue> {
    private static readonly pb::MessageParser<Issue> _parser = new pb::MessageParser<Issue>(() => new Issue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Issue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue(Issue other) : this() {
      severity_ = other.severity_;
      startLine_ = other.startLine_;
      startLineOffset_ = other.startLineOffset_;
      endLine_ = other.endLine_;
      endLineOffset_ = other.endLineOffset_;
      message_ = other.message_;
      ruleKey_ = other.ruleKey_;
      ruleName_ = other.ruleName_;
      filePath_ = other.filePath_;
      userObject_ = other.userObject_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue Clone() {
      return new Issue(this);
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 1;
    private global::Sonarlint.Issue.Types.Severity severity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sonarlint.Issue.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "start_line" field.</summary>
    public const int StartLineFieldNumber = 2;
    private int startLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLine {
      get { return startLine_; }
      set {
        startLine_ = value;
      }
    }

    /// <summary>Field number for the "start_line_offset" field.</summary>
    public const int StartLineOffsetFieldNumber = 3;
    private int startLineOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLineOffset {
      get { return startLineOffset_; }
      set {
        startLineOffset_ = value;
      }
    }

    /// <summary>Field number for the "end_line" field.</summary>
    public const int EndLineFieldNumber = 4;
    private int endLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndLine {
      get { return endLine_; }
      set {
        endLine_ = value;
      }
    }

    /// <summary>Field number for the "end_line_offset" field.</summary>
    public const int EndLineOffsetFieldNumber = 5;
    private int endLineOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndLineOffset {
      get { return endLineOffset_; }
      set {
        endLineOffset_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rule_key" field.</summary>
    public const int RuleKeyFieldNumber = 7;
    private string ruleKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuleKey {
      get { return ruleKey_; }
      set {
        ruleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rule_name" field.</summary>
    public const int RuleNameFieldNumber = 8;
    private string ruleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuleName {
      get { return ruleName_; }
      set {
        ruleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 9;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_object" field.</summary>
    public const int UserObjectFieldNumber = 10;
    private string userObject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserObject {
      get { return userObject_; }
      set {
        userObject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Issue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Issue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Severity != other.Severity) return false;
      if (StartLine != other.StartLine) return false;
      if (StartLineOffset != other.StartLineOffset) return false;
      if (EndLine != other.EndLine) return false;
      if (EndLineOffset != other.EndLineOffset) return false;
      if (Message != other.Message) return false;
      if (RuleKey != other.RuleKey) return false;
      if (RuleName != other.RuleName) return false;
      if (FilePath != other.FilePath) return false;
      if (UserObject != other.UserObject) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (StartLine != 0) hash ^= StartLine.GetHashCode();
      if (StartLineOffset != 0) hash ^= StartLineOffset.GetHashCode();
      if (EndLine != 0) hash ^= EndLine.GetHashCode();
      if (EndLineOffset != 0) hash ^= EndLineOffset.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (RuleKey.Length != 0) hash ^= RuleKey.GetHashCode();
      if (RuleName.Length != 0) hash ^= RuleName.GetHashCode();
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (UserObject.Length != 0) hash ^= UserObject.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Severity != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Severity);
      }
      if (StartLine != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartLine);
      }
      if (StartLineOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartLineOffset);
      }
      if (EndLine != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndLine);
      }
      if (EndLineOffset != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndLineOffset);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (RuleKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RuleKey);
      }
      if (RuleName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RuleName);
      }
      if (FilePath.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FilePath);
      }
      if (UserObject.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserObject);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (StartLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLine);
      }
      if (StartLineOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLineOffset);
      }
      if (EndLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndLine);
      }
      if (EndLineOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndLineOffset);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RuleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleKey);
      }
      if (RuleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleName);
      }
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (UserObject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserObject);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Issue other) {
      if (other == null) {
        return;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.StartLine != 0) {
        StartLine = other.StartLine;
      }
      if (other.StartLineOffset != 0) {
        StartLineOffset = other.StartLineOffset;
      }
      if (other.EndLine != 0) {
        EndLine = other.EndLine;
      }
      if (other.EndLineOffset != 0) {
        EndLineOffset = other.EndLineOffset;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.RuleKey.Length != 0) {
        RuleKey = other.RuleKey;
      }
      if (other.RuleName.Length != 0) {
        RuleName = other.RuleName;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.UserObject.Length != 0) {
        UserObject = other.UserObject;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            severity_ = (global::Sonarlint.Issue.Types.Severity) input.ReadEnum();
            break;
          }
          case 16: {
            StartLine = input.ReadInt32();
            break;
          }
          case 24: {
            StartLineOffset = input.ReadInt32();
            break;
          }
          case 32: {
            EndLine = input.ReadInt32();
            break;
          }
          case 40: {
            EndLineOffset = input.ReadInt32();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            RuleKey = input.ReadString();
            break;
          }
          case 66: {
            RuleName = input.ReadString();
            break;
          }
          case 74: {
            FilePath = input.ReadString();
            break;
          }
          case 82: {
            UserObject = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Issue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Severity {
        [pbr::OriginalName("BLOCKER")] Blocker = 0,
        [pbr::OriginalName("CRITICAL")] Critical = 1,
        [pbr::OriginalName("MAJOR")] Major = 2,
        [pbr::OriginalName("MINOR")] Minor = 3,
        [pbr::OriginalName("INFO")] Info = 4,
      }

    }
    #endregion

  }

  public sealed partial class RuleDetails : pb::IMessage<RuleDetails> {
    private static readonly pb::MessageParser<RuleDetails> _parser = new pb::MessageParser<RuleDetails>(() => new RuleDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuleDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetails(RuleDetails other) : this() {
      key_ = other.key_;
      name_ = other.name_;
      htmlDescription_ = other.htmlDescription_;
      language_ = other.language_;
      severity_ = other.severity_;
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleDetails Clone() {
      return new RuleDetails(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "html_description" field.</summary>
    public const int HtmlDescriptionFieldNumber = 3;
    private string htmlDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HtmlDescription {
      get { return htmlDescription_; }
      set {
        htmlDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 5;
    private string severity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Severity {
      get { return severity_; }
      set {
        severity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuleDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuleDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Name != other.Name) return false;
      if (HtmlDescription != other.HtmlDescription) return false;
      if (Language != other.Language) return false;
      if (Severity != other.Severity) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HtmlDescription.Length != 0) hash ^= HtmlDescription.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Severity.Length != 0) hash ^= Severity.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HtmlDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HtmlDescription);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (Severity.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Severity);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HtmlDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HtmlDescription);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Severity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Severity);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuleDetails other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HtmlDescription.Length != 0) {
        HtmlDescription = other.HtmlDescription;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Severity.Length != 0) {
        Severity = other.Severity;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            HtmlDescription = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 42: {
            Severity = input.ReadString();
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnalysisReq : pb::IMessage<AnalysisReq> {
    private static readonly pb::MessageParser<AnalysisReq> _parser = new pb::MessageParser<AnalysisReq>(() => new AnalysisReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalysisReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalysisReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalysisReq(AnalysisReq other) : this() {
      properties_ = other.properties_.Clone();
      file_ = other.file_.Clone();
      baseDir_ = other.baseDir_;
      workDir_ = other.workDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalysisReq Clone() {
      return new AnalysisReq(this);
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sonarlint.InputFile> _repeated_file_codec
        = pb::FieldCodec.ForMessage(18, global::Sonarlint.InputFile.Parser);
    private readonly pbc::RepeatedField<global::Sonarlint.InputFile> file_ = new pbc::RepeatedField<global::Sonarlint.InputFile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sonarlint.InputFile> File {
      get { return file_; }
    }

    /// <summary>Field number for the "base_dir" field.</summary>
    public const int BaseDirFieldNumber = 3;
    private string baseDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseDir {
      get { return baseDir_; }
      set {
        baseDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "work_dir" field.</summary>
    public const int WorkDirFieldNumber = 4;
    private string workDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkDir {
      get { return workDir_; }
      set {
        workDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalysisReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalysisReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Properties.Equals(other.Properties)) return false;
      if(!file_.Equals(other.file_)) return false;
      if (BaseDir != other.BaseDir) return false;
      if (WorkDir != other.WorkDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Properties.GetHashCode();
      hash ^= file_.GetHashCode();
      if (BaseDir.Length != 0) hash ^= BaseDir.GetHashCode();
      if (WorkDir.Length != 0) hash ^= WorkDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      properties_.WriteTo(output, _map_properties_codec);
      file_.WriteTo(output, _repeated_file_codec);
      if (BaseDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseDir);
      }
      if (WorkDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WorkDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += properties_.CalculateSize(_map_properties_codec);
      size += file_.CalculateSize(_repeated_file_codec);
      if (BaseDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseDir);
      }
      if (WorkDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalysisReq other) {
      if (other == null) {
        return;
      }
      properties_.Add(other.properties_);
      file_.Add(other.file_);
      if (other.BaseDir.Length != 0) {
        BaseDir = other.BaseDir;
      }
      if (other.WorkDir.Length != 0) {
        WorkDir = other.WorkDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
          case 18: {
            file_.AddEntriesFrom(input, _repeated_file_codec);
            break;
          }
          case 26: {
            BaseDir = input.ReadString();
            break;
          }
          case 34: {
            WorkDir = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputFile : pb::IMessage<InputFile> {
    private static readonly pb::MessageParser<InputFile> _parser = new pb::MessageParser<InputFile>(() => new InputFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFile(InputFile other) : this() {
      path_ = other.path_;
      charset_ = other.charset_;
      isTest_ = other.isTest_;
      userObject_ = other.userObject_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFile Clone() {
      return new InputFile(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charset" field.</summary>
    public const int CharsetFieldNumber = 2;
    private string charset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Charset {
      get { return charset_; }
      set {
        charset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_test" field.</summary>
    public const int IsTestFieldNumber = 3;
    private bool isTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTest {
      get { return isTest_; }
      set {
        isTest_ = value;
      }
    }

    /// <summary>Field number for the "user_object" field.</summary>
    public const int UserObjectFieldNumber = 4;
    private string userObject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserObject {
      get { return userObject_; }
      set {
        userObject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Charset != other.Charset) return false;
      if (IsTest != other.IsTest) return false;
      if (UserObject != other.UserObject) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Charset.Length != 0) hash ^= Charset.GetHashCode();
      if (IsTest != false) hash ^= IsTest.GetHashCode();
      if (UserObject.Length != 0) hash ^= UserObject.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Charset.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Charset);
      }
      if (IsTest != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTest);
      }
      if (UserObject.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserObject);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Charset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Charset);
      }
      if (IsTest != false) {
        size += 1 + 1;
      }
      if (UserObject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserObject);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputFile other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Charset.Length != 0) {
        Charset = other.Charset;
      }
      if (other.IsTest != false) {
        IsTest = other.IsTest;
      }
      if (other.UserObject.Length != 0) {
        UserObject = other.UserObject;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Charset = input.ReadString();
            break;
          }
          case 24: {
            IsTest = input.ReadBool();
            break;
          }
          case 34: {
            UserObject = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectedAnalysisReq : pb::IMessage<ConnectedAnalysisReq> {
    private static readonly pb::MessageParser<ConnectedAnalysisReq> _parser = new pb::MessageParser<ConnectedAnalysisReq>(() => new ConnectedAnalysisReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectedAnalysisReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAnalysisReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAnalysisReq(ConnectedAnalysisReq other) : this() {
      properties_ = other.properties_.Clone();
      file_ = other.file_.Clone();
      baseDir_ = other.baseDir_;
      workDir_ = other.workDir_;
      moduleKey_ = other.moduleKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAnalysisReq Clone() {
      return new ConnectedAnalysisReq(this);
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sonarlint.InputFile> _repeated_file_codec
        = pb::FieldCodec.ForMessage(18, global::Sonarlint.InputFile.Parser);
    private readonly pbc::RepeatedField<global::Sonarlint.InputFile> file_ = new pbc::RepeatedField<global::Sonarlint.InputFile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sonarlint.InputFile> File {
      get { return file_; }
    }

    /// <summary>Field number for the "base_dir" field.</summary>
    public const int BaseDirFieldNumber = 3;
    private string baseDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseDir {
      get { return baseDir_; }
      set {
        baseDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "work_dir" field.</summary>
    public const int WorkDirFieldNumber = 4;
    private string workDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkDir {
      get { return workDir_; }
      set {
        workDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "module_key" field.</summary>
    public const int ModuleKeyFieldNumber = 5;
    private string moduleKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleKey {
      get { return moduleKey_; }
      set {
        moduleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectedAnalysisReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectedAnalysisReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Properties.Equals(other.Properties)) return false;
      if(!file_.Equals(other.file_)) return false;
      if (BaseDir != other.BaseDir) return false;
      if (WorkDir != other.WorkDir) return false;
      if (ModuleKey != other.ModuleKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Properties.GetHashCode();
      hash ^= file_.GetHashCode();
      if (BaseDir.Length != 0) hash ^= BaseDir.GetHashCode();
      if (WorkDir.Length != 0) hash ^= WorkDir.GetHashCode();
      if (ModuleKey.Length != 0) hash ^= ModuleKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      properties_.WriteTo(output, _map_properties_codec);
      file_.WriteTo(output, _repeated_file_codec);
      if (BaseDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseDir);
      }
      if (WorkDir.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WorkDir);
      }
      if (ModuleKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ModuleKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += properties_.CalculateSize(_map_properties_codec);
      size += file_.CalculateSize(_repeated_file_codec);
      if (BaseDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseDir);
      }
      if (WorkDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkDir);
      }
      if (ModuleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectedAnalysisReq other) {
      if (other == null) {
        return;
      }
      properties_.Add(other.properties_);
      file_.Add(other.file_);
      if (other.BaseDir.Length != 0) {
        BaseDir = other.BaseDir;
      }
      if (other.WorkDir.Length != 0) {
        WorkDir = other.WorkDir;
      }
      if (other.ModuleKey.Length != 0) {
        ModuleKey = other.ModuleKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
          case 18: {
            file_.AddEntriesFrom(input, _repeated_file_codec);
            break;
          }
          case 26: {
            BaseDir = input.ReadString();
            break;
          }
          case 34: {
            WorkDir = input.ReadString();
            break;
          }
          case 42: {
            ModuleKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StandaloneConfiguration : pb::IMessage<StandaloneConfiguration> {
    private static readonly pb::MessageParser<StandaloneConfiguration> _parser = new pb::MessageParser<StandaloneConfiguration>(() => new StandaloneConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandaloneConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandaloneConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandaloneConfiguration(StandaloneConfiguration other) : this() {
      homePath_ = other.homePath_;
      pluginUrl_ = other.pluginUrl_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandaloneConfiguration Clone() {
      return new StandaloneConfiguration(this);
    }

    /// <summary>Field number for the "home_path" field.</summary>
    public const int HomePathFieldNumber = 1;
    private string homePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HomePath {
      get { return homePath_; }
      set {
        homePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plugin_url" field.</summary>
    public const int PluginUrlFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_pluginUrl_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> pluginUrl_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PluginUrl {
      get { return pluginUrl_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandaloneConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandaloneConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HomePath != other.HomePath) return false;
      if(!pluginUrl_.Equals(other.pluginUrl_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HomePath.Length != 0) hash ^= HomePath.GetHashCode();
      hash ^= pluginUrl_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HomePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HomePath);
      }
      pluginUrl_.WriteTo(output, _repeated_pluginUrl_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HomePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomePath);
      }
      size += pluginUrl_.CalculateSize(_repeated_pluginUrl_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandaloneConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.HomePath.Length != 0) {
        HomePath = other.HomePath;
      }
      pluginUrl_.Add(other.pluginUrl_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HomePath = input.ReadString();
            break;
          }
          case 18: {
            pluginUrl_.AddEntriesFrom(input, _repeated_pluginUrl_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectedConfiguration : pb::IMessage<ConnectedConfiguration> {
    private static readonly pb::MessageParser<ConnectedConfiguration> _parser = new pb::MessageParser<ConnectedConfiguration>(() => new ConnectedConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectedConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedConfiguration(ConnectedConfiguration other) : this() {
      storageId_ = other.storageId_;
      homePath_ = other.homePath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedConfiguration Clone() {
      return new ConnectedConfiguration(this);
    }

    /// <summary>Field number for the "storage_id" field.</summary>
    public const int StorageIdFieldNumber = 1;
    private string storageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StorageId {
      get { return storageId_; }
      set {
        storageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "home_path" field.</summary>
    public const int HomePathFieldNumber = 2;
    private string homePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HomePath {
      get { return homePath_; }
      set {
        homePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectedConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectedConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StorageId != other.StorageId) return false;
      if (HomePath != other.HomePath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StorageId.Length != 0) hash ^= StorageId.GetHashCode();
      if (HomePath.Length != 0) hash ^= HomePath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StorageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StorageId);
      }
      if (HomePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HomePath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StorageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StorageId);
      }
      if (HomePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomePath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectedConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.StorageId.Length != 0) {
        StorageId = other.StorageId;
      }
      if (other.HomePath.Length != 0) {
        HomePath = other.HomePath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StorageId = input.ReadString();
            break;
          }
          case 18: {
            HomePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
