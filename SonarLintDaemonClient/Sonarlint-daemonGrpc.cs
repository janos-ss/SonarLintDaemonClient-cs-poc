// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sonarlint-daemon.proto
// Original file comments:
// SonarLint, open source software quality management tool.
// Copyright (C) 2015-2016 SonarSource
// mailto:contact AT sonarsource DOT com
//
// SonarLint is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// SonarLint is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Sonarlint {
  public static partial class ConnectedSonarLint
  {
    static readonly string __ServiceName = "sonarlint.ConnectedSonarLint";

    static readonly grpc::Marshaller<global::Sonarlint.ConnectedConfiguration> __Marshaller_ConnectedConfiguration = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.ConnectedConfiguration.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.ConnectedAnalysisReq> __Marshaller_ConnectedAnalysisReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.ConnectedAnalysisReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.Issue> __Marshaller_Issue = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.Issue.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.ServerConfig> __Marshaller_ServerConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.ServerConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.ModuleUpdateReq> __Marshaller_ModuleUpdateReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.ModuleUpdateReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.StorageState> __Marshaller_StorageState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.StorageState.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.LogEvent> __Marshaller_LogEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.LogEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.RuleKey> __Marshaller_RuleKey = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.RuleKey.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.RuleDetails> __Marshaller_RuleDetails = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.RuleDetails.Parser.ParseFrom);

    static readonly grpc::Method<global::Sonarlint.ConnectedConfiguration, global::Sonarlint.Void> __Method_Start = new grpc::Method<global::Sonarlint.ConnectedConfiguration, global::Sonarlint.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_ConnectedConfiguration,
        __Marshaller_Void);

    static readonly grpc::Method<global::Sonarlint.ConnectedAnalysisReq, global::Sonarlint.Issue> __Method_Analyze = new grpc::Method<global::Sonarlint.ConnectedAnalysisReq, global::Sonarlint.Issue>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Analyze",
        __Marshaller_ConnectedAnalysisReq,
        __Marshaller_Issue);

    static readonly grpc::Method<global::Sonarlint.ServerConfig, global::Sonarlint.Void> __Method_Update = new grpc::Method<global::Sonarlint.ServerConfig, global::Sonarlint.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_ServerConfig,
        __Marshaller_Void);

    static readonly grpc::Method<global::Sonarlint.ModuleUpdateReq, global::Sonarlint.Void> __Method_UpdateModule = new grpc::Method<global::Sonarlint.ModuleUpdateReq, global::Sonarlint.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateModule",
        __Marshaller_ModuleUpdateReq,
        __Marshaller_Void);

    static readonly grpc::Method<global::Sonarlint.Void, global::Sonarlint.StorageState> __Method_GetState = new grpc::Method<global::Sonarlint.Void, global::Sonarlint.StorageState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetState",
        __Marshaller_Void,
        __Marshaller_StorageState);

    static readonly grpc::Method<global::Sonarlint.Void, global::Sonarlint.LogEvent> __Method_StreamLogs = new grpc::Method<global::Sonarlint.Void, global::Sonarlint.LogEvent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamLogs",
        __Marshaller_Void,
        __Marshaller_LogEvent);

    static readonly grpc::Method<global::Sonarlint.RuleKey, global::Sonarlint.RuleDetails> __Method_GetRuleDetails = new grpc::Method<global::Sonarlint.RuleKey, global::Sonarlint.RuleDetails>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRuleDetails",
        __Marshaller_RuleKey,
        __Marshaller_RuleDetails);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConnectedSonarLint</summary>
    public abstract partial class ConnectedSonarLintBase
    {
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.Void> Start(global::Sonarlint.ConnectedConfiguration request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Analyze(global::Sonarlint.ConnectedAnalysisReq request, grpc::IServerStreamWriter<global::Sonarlint.Issue> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates storage using a provided server configuration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.Void> Update(global::Sonarlint.ServerConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates a module using a provided server configuration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.Void> UpdateModule(global::Sonarlint.ModuleUpdateReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get state of the storage
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.StorageState> GetState(global::Sonarlint.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamLogs(global::Sonarlint.Void request, grpc::IServerStreamWriter<global::Sonarlint.LogEvent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.RuleDetails> GetRuleDetails(global::Sonarlint.RuleKey request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConnectedSonarLint</summary>
    public partial class ConnectedSonarLintClient : grpc::ClientBase<ConnectedSonarLintClient>
    {
      /// <summary>Creates a new client for ConnectedSonarLint</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConnectedSonarLintClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConnectedSonarLint that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConnectedSonarLintClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConnectedSonarLintClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConnectedSonarLintClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Start(global::Sonarlint.ConnectedConfiguration request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Start(global::Sonarlint.ConnectedConfiguration request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> StartAsync(global::Sonarlint.ConnectedConfiguration request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> StartAsync(global::Sonarlint.ConnectedConfiguration request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.Issue> Analyze(global::Sonarlint.ConnectedAnalysisReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Analyze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.Issue> Analyze(global::Sonarlint.ConnectedAnalysisReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Analyze, null, options, request);
      }
      /// <summary>
      /// updates storage using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Update(global::Sonarlint.ServerConfig request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates storage using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Update(global::Sonarlint.ServerConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// updates storage using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> UpdateAsync(global::Sonarlint.ServerConfig request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates storage using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> UpdateAsync(global::Sonarlint.ServerConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// updates a module using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void UpdateModule(global::Sonarlint.ModuleUpdateReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateModule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a module using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void UpdateModule(global::Sonarlint.ModuleUpdateReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateModule, null, options, request);
      }
      /// <summary>
      /// updates a module using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> UpdateModuleAsync(global::Sonarlint.ModuleUpdateReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateModuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a module using a provided server configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> UpdateModuleAsync(global::Sonarlint.ModuleUpdateReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateModule, null, options, request);
      }
      /// <summary>
      /// get state of the storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.StorageState GetState(global::Sonarlint.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get state of the storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.StorageState GetState(global::Sonarlint.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetState, null, options, request);
      }
      /// <summary>
      /// get state of the storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.StorageState> GetStateAsync(global::Sonarlint.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get state of the storage
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.StorageState> GetStateAsync(global::Sonarlint.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetState, null, options, request);
      }
      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.LogEvent> StreamLogs(global::Sonarlint.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StreamLogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.LogEvent> StreamLogs(global::Sonarlint.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamLogs, null, options, request);
      }
      public virtual global::Sonarlint.RuleDetails GetRuleDetails(global::Sonarlint.RuleKey request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRuleDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sonarlint.RuleDetails GetRuleDetails(global::Sonarlint.RuleKey request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRuleDetails, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.RuleDetails> GetRuleDetailsAsync(global::Sonarlint.RuleKey request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRuleDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.RuleDetails> GetRuleDetailsAsync(global::Sonarlint.RuleKey request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRuleDetails, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConnectedSonarLintClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConnectedSonarLintClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConnectedSonarLintBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Start, serviceImpl.Start)
          .AddMethod(__Method_Analyze, serviceImpl.Analyze)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_UpdateModule, serviceImpl.UpdateModule)
          .AddMethod(__Method_GetState, serviceImpl.GetState)
          .AddMethod(__Method_StreamLogs, serviceImpl.StreamLogs)
          .AddMethod(__Method_GetRuleDetails, serviceImpl.GetRuleDetails).Build();
    }

  }
  public static partial class StandaloneSonarLint
  {
    static readonly string __ServiceName = "sonarlint.StandaloneSonarLint";

    static readonly grpc::Marshaller<global::Sonarlint.StandaloneConfiguration> __Marshaller_StandaloneConfiguration = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.StandaloneConfiguration.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.Void> __Marshaller_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.AnalysisReq> __Marshaller_AnalysisReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.AnalysisReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.Issue> __Marshaller_Issue = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.Issue.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.LogEvent> __Marshaller_LogEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.LogEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.RuleKey> __Marshaller_RuleKey = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.RuleKey.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sonarlint.RuleDetails> __Marshaller_RuleDetails = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sonarlint.RuleDetails.Parser.ParseFrom);

    static readonly grpc::Method<global::Sonarlint.StandaloneConfiguration, global::Sonarlint.Void> __Method_Start = new grpc::Method<global::Sonarlint.StandaloneConfiguration, global::Sonarlint.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_StandaloneConfiguration,
        __Marshaller_Void);

    static readonly grpc::Method<global::Sonarlint.AnalysisReq, global::Sonarlint.Issue> __Method_Analyze = new grpc::Method<global::Sonarlint.AnalysisReq, global::Sonarlint.Issue>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Analyze",
        __Marshaller_AnalysisReq,
        __Marshaller_Issue);

    static readonly grpc::Method<global::Sonarlint.Void, global::Sonarlint.LogEvent> __Method_StreamLogs = new grpc::Method<global::Sonarlint.Void, global::Sonarlint.LogEvent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamLogs",
        __Marshaller_Void,
        __Marshaller_LogEvent);

    static readonly grpc::Method<global::Sonarlint.RuleKey, global::Sonarlint.RuleDetails> __Method_GetRuleDetails = new grpc::Method<global::Sonarlint.RuleKey, global::Sonarlint.RuleDetails>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRuleDetails",
        __Marshaller_RuleKey,
        __Marshaller_RuleDetails);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sonarlint.SonarlintDaemonReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of StandaloneSonarLint</summary>
    public abstract partial class StandaloneSonarLintBase
    {
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.Void> Start(global::Sonarlint.StandaloneConfiguration request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Analyze(global::Sonarlint.AnalysisReq request, grpc::IServerStreamWriter<global::Sonarlint.Issue> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamLogs(global::Sonarlint.Void request, grpc::IServerStreamWriter<global::Sonarlint.LogEvent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sonarlint.RuleDetails> GetRuleDetails(global::Sonarlint.RuleKey request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StandaloneSonarLint</summary>
    public partial class StandaloneSonarLintClient : grpc::ClientBase<StandaloneSonarLintClient>
    {
      /// <summary>Creates a new client for StandaloneSonarLint</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StandaloneSonarLintClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StandaloneSonarLint that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StandaloneSonarLintClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StandaloneSonarLintClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StandaloneSonarLintClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Start(global::Sonarlint.StandaloneConfiguration request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sonarlint.Void Start(global::Sonarlint.StandaloneConfiguration request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> StartAsync(global::Sonarlint.StandaloneConfiguration request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// must be called before any other rpc 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.Void> StartAsync(global::Sonarlint.StandaloneConfiguration request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.Issue> Analyze(global::Sonarlint.AnalysisReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Analyze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.Issue> Analyze(global::Sonarlint.AnalysisReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Analyze, null, options, request);
      }
      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.LogEvent> StreamLogs(global::Sonarlint.Void request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StreamLogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// stream all logs from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Sonarlint.LogEvent> StreamLogs(global::Sonarlint.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamLogs, null, options, request);
      }
      public virtual global::Sonarlint.RuleDetails GetRuleDetails(global::Sonarlint.RuleKey request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRuleDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sonarlint.RuleDetails GetRuleDetails(global::Sonarlint.RuleKey request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRuleDetails, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.RuleDetails> GetRuleDetailsAsync(global::Sonarlint.RuleKey request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRuleDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sonarlint.RuleDetails> GetRuleDetailsAsync(global::Sonarlint.RuleKey request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRuleDetails, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StandaloneSonarLintClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StandaloneSonarLintClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StandaloneSonarLintBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Start, serviceImpl.Start)
          .AddMethod(__Method_Analyze, serviceImpl.Analyze)
          .AddMethod(__Method_StreamLogs, serviceImpl.StreamLogs)
          .AddMethod(__Method_GetRuleDetails, serviceImpl.GetRuleDetails).Build();
    }

  }
}
#endregion
